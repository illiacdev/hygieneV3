scalar LocalDate
scalar LocalDateTime

type Query {
    serverTime : LocalDateTime
    tree:String

}

type Mutation{

}

#/////////////////////////////////////////////////////////////////////////////////
extend type Query {
    recordType(name:String!,type:String):RecordType
    recordTypes:[RecordType]
    recordTypesTemplate(templateName:String):[RecordType]
}
extend type Mutation {
    createRecordValidValue(type_name:String!,item_name:String!):RecordType
    createRecord(name:String!,type:String):RecordType
}

type RecordType{
    name:String
    type:String #bool #text #datetime
    recordValidValues:[RecordValidValue]
}

type RecordValidValue{
    name:String
}

#////////////////////////////////////////////////////////////////////////////
extend type Query {
    recordingPapers:[RecordingPaper]
}
extend type Mutation {
    createRecordingPaper(input:IrecordingPaper!):RecordingPaper
}


type RecordingPaper {
    id: ID
    action: String
    actionEndTime: LocalDateTime
    actionStartTime: LocalDateTime
    actionType: String
    glove: String
    location: String
    observeDepartment: String
    observeName: String
    observeOccupation: String
    observer: String
    passFail: String
    subAction: String
}


input IrecordingPaper {
    action: String
    actionEndTime: LocalDateTime
    actionStartTime: LocalDateTime
    actionType: String
    glove: String
    location: String
    observeDepartment: String
    observeName: String
    observeOccupation: String
    observer: String
    passFail: String
    subAction: String
}


#/////////////////////////////////////////////////////////////////////////////////
extend type Query {
    teams:[Team]
}

extend type Mutation {
    createTeam(name:String):Team
    createMember(teamName:String, memberName:String):Team

}

type Member {
    name: String
    team: Team
}

type Team {
    members: [Member]
    name: String
}

