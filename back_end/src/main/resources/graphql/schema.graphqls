scalar LocalDate
scalar LocalDateTime

type Query {
    serverTime : LocalDateTime
}

type Mutation{

}

#/////////////////////////////////////////////////////////////////////////////////
extend type Query {
    recordType(name:String!):RecordType
    recordTypes:[RecordType]
}
extend type Mutation {
    caeateRecordValidValue(type_name:String!,item_name:String!):RecordType
}

type RecordType{
    name:String
    recordValidValues:[RecordValidValue]
}

type RecordValidValue{
    name:String
}

#////////////////////////////////////////////////////////////////////////////
extend type Query {
    recordingPapers:[RrecordingPaper]
}
extend type Mutation {
    createRecordingPaper(input:IrecordingPaper!):RrecordingPaper
}


type RrecordingPaper {
    id: ID
    action: String
    actionEndTime: LocalDateTime
    actionStartTime: LocalDateTime
    actionType: String
    glove: String
    location: String
    observeDepartment: String
    observeName: String
    observeOccupation: String
    observer: String
    passFail: String
    subAction: String
}


input IrecordingPaper {
    action: String
    actionEndTime: LocalDateTime
    actionStartTime: LocalDateTime
    actionType: String
    glove: String
    location: String
    observeDepartment: String
    observeName: String
    observeOccupation: String
    observer: String
    passFail: String
    subAction: String
}


#/////////////////////////////////////////////////////////////////////////////////
#extend type Query {
#
#}
#
#extend type Mutation {
#}

#type Member {
#    memberID: MemberID
#    team: Team
#}
#
#type MemberID {
#    fk_name: String
#    name: String
#}
#
#type Team {
#members: [Member]
#name: String
#}
